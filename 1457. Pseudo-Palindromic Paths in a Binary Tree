/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int count  = 0;// wehave to return the number of palindrome//
    void dfs(TreeNode* root,vector<int> mp)
    {
        // base casee ///
        if(root==NULL)
            return;
        // increment the count of the curr node's val
        mp[root->val]++;
    // if we reached the leaf node then count the no. of odd frequency, if odd frequency is more than 1 then palindrome is not possible
        if(root->left == NULL and root->right == NULL)
        {
            int odd_count  = 0;
            for(auto x : mp)
            {
                if(x % 2)
                {
                    odd_count++;
                }
            }
            if(odd_count <= 1)
            {
                count++;
            }
            return;
        }
        // traverse the left subtree //
        dfs(root->left,mp);
        // traverse the right sub tree //
        dfs(root->right,mp);
    }
    int pseudoPalindromicPaths (TreeNode* root)
    {
        vector<int> mp(10,0);// given binary tree where node val is from 0 - 9//
        dfs(root,mp);
        return count;
    }
};
