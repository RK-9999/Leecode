class Solution {
public: 
    vector<vector<int>> dp;
    int rohit(int i,int n,int j,vector<int> &nums,vector<int> &mul)
    {
        if(j==mul.size())
            return 0;
        if(dp[i][j] != INT_MIN)
            return dp[i][j];
        // start //
        int start = rohit(i+1,n,j+1,nums,mul) + (nums[i] * mul[j]);
        // end //
        int end = rohit(i,n,j+1,nums,mul) + (nums[(n-1)-(j-i)] * mul[j]);
        
         return dp[i][j] = max(start,end);
    }
    int maximumScore(vector<int>& nums, vector<int>& mul) 
    {
        int n = nums.size();
        int m = mul.size();
        dp.resize(m+1,vector<int>(m+1,INT_MIN));
        return rohit(0,n,0,nums,mul);
    }
};
