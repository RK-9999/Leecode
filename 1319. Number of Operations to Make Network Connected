class Solution {
public:
    // if there are n nodes so we simply need m-1 minimum wires to connect to the network  //return connected-1;
    bool dfs(int node,vector<int> &visit,vector<int> adj[])
    {
        visit[node]=1;
        for(auto it:adj[node])
        {
            if(!visit[it])
            {
                if(dfs(it,visit,adj))
                    return true;
            }
        }
        return false;
    }
    int makeConnected(int n, vector<vector<int>>& connections) 
    {
        if(n-1 > connections.size())return -1;
        // adj list //
        vector<int>adj[n];
        int connected=0;
        vector<int> visit(n+1,0);
        /// make th elist //
        for(auto it : connections)
        {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        // counting the components by dfs //
        for(int i=0;i<n;i++)
        {
            if(!visit[i])
            {
                connected++;
                dfs(i,visit,adj);
            }
        }
  // if there are n nodes so we simply need m-1 minimum wires to connect to the network
        return connected-1;
    }
};
