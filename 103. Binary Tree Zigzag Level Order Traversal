/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root)
    {
        vector<vector<int>> ans;
        if(root==NULL)return ans;
        queue<TreeNode*> q;
        q.push(root);
        //initialise a counter to check the alternate condiiton
        //rest is simple level order traversal
        int j = 0;
        while(!q.empty())
        {
            int s = q.size();
            vector<int> level;
            for(int i=0;i<s;i++)
            {
                TreeNode* temp = q.front();
                q.pop();
                if(temp->left != NULL)q.push(temp->left);
                if(temp->right != NULL)q.push(temp->right);
                level.push_back(temp->val);
            }
               //here at the time of inserion of your final nodes check wether the counter is alternate or not. 
			//Here i have used simple way if the counter is even it should insert the nodes simply. 
			//But if the counter is odd it must change the order of nodes to be inserted in the resultant vector.
            if(j%2==0){
                ans.push_back(level);
            }
            else{
                reverse(level.begin(),level.end());
                ans.push_back(level);
            }
            j++;
        }
        return ans;
    }
};
