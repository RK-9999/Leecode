class Solution {
public:
    vector<int> visit;
    vector<int> color;
    bool dfs(int v,int c,vector<vector<int>> &graph)
    {
        visit[v]=1;
        color[v]=c;
        for(int child:graph[v])
        {
            if(visit[child]==0)
            {
                if(dfs(child,c^1,graph)==false)
                    return false;
            }
            else
            {
                if(color[v]==color[child])
                    return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) 
    {
        int n = graph.size();
        visit.resize(n);
        color.resize(n);
        for(int i=0;i<n;i++)
        {
            if(visit[i]==0 and dfs(i,0,graph)==false)
            {
                return false;
            }
        }
        return true;
    }
};
