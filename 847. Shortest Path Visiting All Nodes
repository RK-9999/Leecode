class Solution {
public:
    // clas to carry the values at atime //
        class tuple
        {
            public:
            int node;
            int mask;
            int cost;
        tuple(int node,int mask,int cost)
        {
            this->node=node;
            this->mask=mask;
            this->cost=cost;
        }
        };
    int shortestPathLength(vector<vector<int>>& graph) 
    {
        int n = graph.size();
        queue<tuple> q;
        set<pair<int,int>> vis;
        int all = (1<<n)-1;
        for(int i=0;i<n;i++)
        {
            int maskvalue=(1<<i);
            tuple thisnode(i,maskvalue,1);
            q.push(thisnode);
            vis.insert({i,maskvalue});
        }
        while(q.empty()==false)
        {
            tuple curr = q.front();
            q.pop();
            if(curr.mask==all)
            {
                return curr.cost-1;
            }
            for(auto &adj : graph[curr.node])
            {
                int bothvisitmask = curr.mask;
                bothvisitmask = bothvisitmask| (1<<adj);
                tuple ThisNode(adj, bothvisitmask, curr.cost + 1);
                if(vis.find({adj,bothvisitmask})==vis.end())
                {
                    vis.insert({adj,bothvisitmask});
                    q.push(ThisNode);
                }
            }
        }
        return -1;
    }
};
