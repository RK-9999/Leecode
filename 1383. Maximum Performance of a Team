class Solution {
public:
    const int mod = (int) 1e9+7;
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) 
    {
        // to mantain the heap of size k we will use prority_queue //
        priority_queue<int,vector<int>,greater<int>> pq;
        // to stroe the pair of efficiency and speed //
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++)
        {
            v.push_back({efficiency[i],speed[i]});
        }
        // sort in decreasing order of efficiency 
        sort(v.rbegin(),v.rend());
        // totalspeed is the sum of speed of k engineers
        long totalspeed = 0,ans=0;
        // iterate over all engineers 
        for(int i=0;i<n;i++)
        {
            int curreff = v[i].first;
            int currspeed = v[i].second;
            // if the size of pq is k 
            if(pq.size()==k)
            {
                // remove the minimum speed in the pq
                totalspeed -= pq.top();
                pq.pop();
            }
            // push the current sppedd in pq 
            pq.push(currspeed);
            // add the current speed to totalspeed 
            totalspeed += currspeed;
            // update the ans 
            ans = max(ans,totalspeed*curreff);
        }
        
        return ans%mod;
    }
};
