class Solution {
public:
    int Binary_search(vector<int> &a)
    {
        int l = 0;
        int h= a.size()-1;
        int ans = -1;
        while(l<=h)
        {
            int mid = l + (h-l) / 2;
            if(a[mid]==1)
            {
                ans = mid;
                l = mid+1;
            }
            else if(a[mid]<1)
            {
                h = mid-1;
            }
        }
        return ans;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) 
    {
        vector<int> ans;
        vector<pair<int,int>> vec;
        int m = mat.size();
        for(int i=0;i<m;i++)
        {
            int cnt = Binary_search(mat[i])+1;
            vec.push_back({cnt,i});
        }
        sort(vec.begin(),vec.end());
        for(int i=0;i<k;i++)
        {
            ans.push_back(vec[i].second);
        }
        return ans;
    }
};
