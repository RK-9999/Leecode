class RandomizedSet 
{
private:
unordered_set<int> set;
public:
    RandomizedSet() 
    {

    }
      /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) 
    {
        if(set.find(val) != set.end())return false;
        set.insert(val);
        return true;
    }
        /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) 
    {
        if(set.find(val)==set.end())return false;
        set.erase(val);
        return true;    
    }
      /** Get a random element from the set. */
    int getRandom() 
    {
        const int i = rand()%set.size();
        auto itr = set.begin();
        advance(itr,i);
        return *itr;
    }
};

/**
  int getRandom() {
        const int i = rand() % set.size();
        auto itr = set.begin();
        advance(itr, i);  // get to random index i
        return *itr;






 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
