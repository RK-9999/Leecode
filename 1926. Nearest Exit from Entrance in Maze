class Solution {
public:
    bool isvalid(int i,int j,int n,int m)
    {
        return (i>=0&&j>=0&&i<n&&j<m);
        
    }
    bool isboundary(int i,int j,int n,int m)
    {
        return (i==0||j==0||i==n-1||j==m-1);
    }
    bool isentrance(int i,int j,int n,int m)
    {
        return (i==n && j==m);
    }
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) 
    {
        int n = maze.size();
        int m = maze[0].size();
        vector<vector<int>> vis(n,vector<int>(m,INT_MAX));
        queue<pair<int,int>> q;
        q.push({entrance[0],entrance[1]});
        vis[entrance[0]][entrance[1]]=1;
        while(!q.empty())
        {
            auto  f = q.front();
            q.pop();
            int x=f.first;
            int y=f.second;
            //x+1//
            if(isvalid(x+1,y,n,m) && maze[x+1][y]=='.' && vis[x+1][y]==INT_MAX)
            {
                if(isboundary(x+1,y,n,m) && !isentrance(x+1,y,entrance[0],entrance[1]))
                {
                    return vis[x][y];
                }
                vis[x+1][y]=vis[x][y]+1;
                q.push({x+1,y});
            }
            // x-1 //
            if(isvalid(x-1,y,n,m) && maze[x-1][y]=='.' && vis[x-1][y]==INT_MAX)
            {
                if(isboundary(x-1,y,n,m) && !isentrance(x-1,y,entrance[0],entrance[1]))
                {
                    return vis[x][y];
                }
                vis[x-1][y]=vis[x][y]+1;
                q.push({x-1,y});
            }
            // y+1 //
            if(isvalid(x,y+1,n,m) && maze[x][y+1]=='.' && vis[x][y+1]==INT_MAX)
            {
                if(isboundary(x,y+1,n,m) && !isentrance(x,y+1,entrance[0],entrance[1]))
                {
                    return vis[x][y];
                }
                vis[x][y+1]=vis[x][y]+1;
                q.push({x,y+1});
            }
            // y-1 //
            if(isvalid(x,y-1,n,m) && maze[x][y-1]=='.' && vis[x][y-1]==INT_MAX)
            {
                if(isboundary(x,y-1,n,m) && !isentrance(x,y-1,entrance[0],entrance[1]))
                {
                    return vis[x][y];
                }
                vis[x][y-1]=vis[x][y]+1;
                q.push({x,y-1});
            }
        }
        return -1;
    }
};
